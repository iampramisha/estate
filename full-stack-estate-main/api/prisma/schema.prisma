// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Post {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  title      String
  price      Int
  images     String[]
  address    String
  city       String
  bedroom    Int
  bathroom   Int
  latitude   String
  longitude  String
  type       Type
 property   Property  // `property` is the field in the Post model.
  // `Property` is the enum that defines the valid values for this field.
  createdAt  DateTime    @default(now())
  user       User        @relation(fields: [userId], references: [id])
  userId     String      @db.ObjectId
  postDetail PostDetail?
  savedPosts SavedPost[]
}

enum Type {
  buy
  rent
}

enum Property {
  apartment
  house
  condo
  land
}

model PostDetail {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  desc       String
  utilities  String?
  pet        String?
  income     String?
  size       Int?
  school     Int?
  bus        Int?
  restaurant Int?
  post       Post    @relation(fields: [postId], references: [id])
  postId     String  @unique @db.ObjectId
}

model SavedPost {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  // 'id' is the primary key for the SavedPost model, represented as a MongoDB ObjectId.

  user      User     @relation(fields: [userId], references: [id])
  // 'user' is a relation field that references the User model. The 'userId' field will store the ObjectId of the related User.

  post      Post     @relation(fields: [postId], references: [id])
  // 'post' is a relation field that references the Post model. The 'postId' field will store the ObjectId of the related Post.

  userId    String   @db.ObjectId
  // 'userId' stores the ObjectId of the User who saved the post.

  postId    String   @db.ObjectId
  // 'postId' stores the ObjectId of the Post that is being saved by the user.

  createdAt DateTime @default(now())
  // 'createdAt' stores the timestamp of when the post was saved, with a default value of the current time.

  @@unique([userId, postId])
  // This creates a composite unique constraint on the combination of 'userId' and 'postId'.
  // This means that a user can only save a specific post once.
  // It allows multiple users to save the same post, but each user can only save each post one time.
}


model User {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  email      String      @unique
  username   String      @unique
  password   String
  avatar     String?
  createdAt  DateTime    @default(now())
  posts      Post[]
  savedPosts SavedPost[]
chats Chat[] @relation(fields: [chatIds], references:[id])
chatIds String[] @db.ObjectId

}
model Chat {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  users     User[]    @relation(fields: [userIDs], references: [id])
  userIDs   String[]  @db.ObjectId
  createdAt DateTime  @default(now())
  seenBy    String[]  @db.ObjectId
  messages  Message[]
  lastMessage String?
}

model Message {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  text      String
  userId    String
  chat      Chat     @relation(fields: [chatId], references: [id])
  chatId    String   @db.ObjectId
  createdAt DateTime @default(now())
}

